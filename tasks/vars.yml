# Copyright 2020-2023 Chris Croome
#
# This file is part of the Webarchitects ONLYOFFICE Ansible role.
#
# The Webarchitects ONLYOFFICE Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects ONLYOFFICE Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects ONLYOFFICE Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Set variables needed for the install
  block:

    - name: PostgreSQL
      block:

        - name: Include PostgreSQL role info tasks
          ansible.builtin.include_role:
            name: postgresql
            tasks_from: info.yml

        - name: The existance of the PostgreSQL user and database is required
          ansible.builtin.assert:
            that:
              - postgresql_dbs_existing is defned
              - postgresql_dbs_existing != []
              - postgresql_users_existing is defined
              - postgresql_users_existing != []
              - onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) in postgresql_dbs_existing
              - onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) in postgresql_users_existing
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Include PostgreSQL role read password tasks
          ansible.builtin.include_role:
            name: postgresql
            tasks_from: pgpass_read.yml
          vars:
            postgresql_db: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}"
            postgresql_user: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) }}"

        - name: Set a fact for the PostgreSQL password
          ansible.builtin.set_fact:
            onlyoffice_db_pwd: "{{ postgresql_password }}"

        - name: The PostgreSQL password is required
          ansible.builtin.assert:
            that:
              - onlyoffice_db_pwd is defined
              - onlyoffice_db_pwd | length > 0

      when: onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_type) == "postgres"

    - name: MariaDB
      block:

        - name: Include MariaDB role
          ansible.builtin.include_role:
            name: mariadb
            tasks_from: user.yml
          vars:
            mariadb_database: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}"
            mariadb_username: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) }}"

        - name: Set a fact for the MariaDB password
          ansible.builtin.set_fact:
            onlyoffice_db_pwd: "{{ mariadb_password }}"

        - name: The MariaDB password is required
          ansible.builtin.assert:
            that:
              - onlyoffice_db_pwd is defined
              - onlyoffice_db_pwd | length > 0

      when: onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_type) == "mariadb"

    - name: Include RabbitMQ role
      ansible.builtin.include_role:
        name: rabbitmq
        tasks_from: password.yml
      vars:
        rabbitmq_username: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_rabbitmq_user) }}"

    - name: Set a fact for the RabbitMQ password
      ansible.builtin.set_fact:
        onlyoffice_rabbitmq_pwd: "{{ rabbitmq_password }}"

    - name: Root JWT secret present
      ansible.builtin.shell: |-
        set -e -o pipefail
        pwgen -cns 32 1 > \
        /root/.onlyoffice.jwt.secret && \
        chmod 0600 /root/.onlyoffice.jwt.secret
      args:
        creates: /root/.onlyoffice.jwt.secret
        executable: "{{ ansible_local.bash.path }}"
      no_log: true

    - name: Check if the root JWT secret file exists
      ansible.builtin.stat:
        path: /root/.onlyoffice.jwt.secret
      register: onlyoffice_jwt_secret_file_check

    - name: Slurp and register a fact for the root JWT secret
      block:

        - name: Slurp a base64 encoded version of the JWT secret
          ansible.builtin.slurp:
            src: /root/.onlyoffice.jwt.secret
          register: onlyoffice_jwt_secret_b64encoded
          no_log: true

        - name: Decode the base64 encoded version of the JWT secret file and set a variable
          ansible.builtin.set_fact:
            onlyoffice_jwt_secret: "{{ onlyoffice_jwt_secret_b64encoded['content'] | b64decode | trim }}"
          no_log: true

      when: onlyoffice_jwt_secret_file_check.stat.exists | bool

    - name: Root FS secret present
      ansible.builtin.shell: |-
        set -e -o pipefail
        pwgen -cns 20 1 > \
        /root/.onlyoffice.fs.secret && \
        chmod 0600 /root/.onlyoffice.fs.secret
      args:
        creates: /root/.onlyoffice.fs.secret
        executable: "{{ ansible_local.bash.path }}"
      no_log: true

    - name: Check if the root FS secret file exists
      ansible.builtin.stat:
        path: /root/.onlyoffice.fs.secret
      register: onlyoffice_fs_secret_file_check

    - name: Slurp and register a fact for the root FS secret
      block:

        - name: Slurp a base64 encoded version of the FS secret
          ansible.builtin.slurp:
            src: /root/.onlyoffice.fs.secret
          register: onlyoffice_fs_secret_b64encoded
          no_log: true

        - name: Decode the base64 encoded version of the FS secret file and set a variable
          ansible.builtin.set_fact:
            onlyoffice_fs_secret: "{{ onlyoffice_fs_secret_b64encoded['content'] | b64decode | trim }}"
          no_log: true

      when: onlyoffice_fs_secret_file_check.stat.exists | bool

    # - name: Include JSON Web Token tasks
    #   ansible.builtin.include_tasks: jwt.yml

    # - name: Run documentserver-update-securelink.sh to update /etc/onlyoffice/documentserver/local.json
    #   block:

    #     - name: Check /usr/bin/documentserver-update-securelink.sh is present
    #       ansible.builtin.stat:
    #         path: /usr/bin/documentserver-update-securelink.sh
    #       register: onlyoffice_documentserver_update_securelink
    #       failed_when: not onlyoffice_documentserver_update_securelink.stat.exists

    #     - name: Run /usr/bin/documentserver-update-securelink.sh
    #       ansible.builtin.command: "/usr/bin/documentserver-update-securelink.sh {{ onlyoffice_jwt_secret }}"
    #       no_log: true
    #       changed_when: true

    #   when: >-
    #     ( onlyoffice_local_json.services.CoAuthoring.secret.session.string is not defined ) or
    #     ( onlyoffice_local_json.services.CoAuthoring.secret.session.string | length == 0 ) or
    #     ( onlyoffice_local_json.storage.fs.secretString is not defined ) or
    #     ( onlyoffice_local_json.storage.fs.secretString | length == 0 ) or
    #     ( onlyoffice_local_json.services.CoAuthoring.secret.session.string != onlyoffice_jwt_secret )

    - name: Get existing debconf values for onlyoffice-documentserver
      ansible.builtin.debconf:
        name: onlyoffice-documentserver
      no_log: true
      register: onlyoffice_dcnf_current

    - name: Debug onlyoffice_debconf_existing
      ansible.builtin.debug:
        var: onlyoffice_dcnf_current
        verbosity: 3

    - name: Create a list of the existing debconf values
      ansible.builtin.set_fact:
        onlyoffice_dcnf_existing: "{{ onlyoffice_dcnf_current.current | dict2items }}"
      no_log: true
      when:
        - onlyoffice_dcnf_current.current is defined
        - onlyoffice_dcnf_current.current != {}

    - name: Debug onlyoffice_dcnf_existing
      ansible.builtin.debug:
        var: onlyoffice_dcnf_existing
        verbosity: 2
      when: onlyoffice_dcnf_existing is defined

  tags:
    - onlyoffice
...
