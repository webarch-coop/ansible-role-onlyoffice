# Copyright 2020-2025 Chris Croome
#
# This file is part of the Webarchitects ONLYOFFICE Ansible role.
#
# The Webarchitects ONLYOFFICE Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects ONLYOFFICE Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects ONLYOFFICE Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: MariaDB tasks
  block:

    - name: Check if /etc/systemd/system/mariadb.service.d/mariadb.conf is present
      ansible.builtin.stat:
        path: /etc/systemd/system/mariadb.service.d/mariadb.conf
      register: onlyoffice_mariadb_systemd_conf_path

    - name: Check /etc/systemd/system/mariadb.service.d/mariadb.conf when it exists
      block:

        - name: Slurp /etc/systemd/system/mariadb.service.d/mariadb.conf
          ansible.builtin.slurp:
            src: /etc/systemd/system/mariadb.service.d/mariadb.conf
          register: onlyoffice_mariadb_systemd_conf_b64encoded

        - name: Decode the base64 encoded version of /etc/systemd/system/mariadb.service.d/mariadb.conf set a variable
          ansible.builtin.set_fact:
            onlyoffice_mariadb_systemd_conf: >-
              {{ onlyoffice_mariadb_systemd_conf_b64encoded['content'] |
              ansible.builtin.b64decode |
              community.general.jc('ini') }}

        - name: Debug the contents of /etc/systemd/system/mariadb.service.d/mariadb.conf
          ansible.builtin.debug:
            var: onlyoffice_mariadb_systemd_conf
            verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

        - name: Check that PrivateNetwork is false if defined in /etc/systemd/system/mariadb.service.d/mariadb.conf
          ansible.builtin.assert:
            that:
              - not onlyoffice_mariadb_systemd_conf.Service.PrivateNetwork | bool
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
            fail_msg: >-
              Please set PrivateNetwork in /etc/systemd/system/mariadb.service.d/mariadb.conf to false as ONLYOFFICE
              DocumentServer uses 127.0.0.1 rather than localhost to access MariaDB.
          when: onlyoffice_mariadb_systemd_conf.Service.PrivateNetwork is defined

      when:
        - onlyoffice_mariadb_systemd_conf_path.stat.exists is defined
        - onlyoffice_mariadb_systemd_conf_path.stat.exists | bool

    - name: Include MariaDB role
      ansible.builtin.include_role:
        name: mariadb
        tasks_from: user.yml
      vars:
        mariadb_database: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}"
        mariadb_host: localhost
        mariadb_priv: "{{ onlyoffice_mariadb_priv }}"
        mariadb_username: "{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) }}"

    - name: Set a fact for the MariaDB password
      ansible.builtin.set_fact:
        onlyoffice_db_pwd: "{{ mariadb_password }}"

    - name: The MariaDB password is required
      ansible.builtin.assert:
        that:
          - onlyoffice_db_pwd is defined
          - onlyoffice_db_pwd | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check service facts
      ansible.builtin.service_facts:

    - name: Debug service facts
      ansible.builtin.debug:
        var: ansible_facts.services
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug MariaDB service fact state
      ansible.builtin.debug:
        msg: "{{ ansible_facts | community.general.json_query(onlyoffice_jpq_mariadb_service) }}"

    - name: Check that MariaDB is running
      ansible.builtin.assert:
        that:
          - ansible_facts | community.general.json_query(onlyoffice_jpq_mariadb_service) == "running"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Stat the MariaDB socket path
      ansible.builtin.stat:
        path: "{{ onlyoffice_mariadb_socket }}"
      register: onlyoffice_mariadb_socket_path

    - name: Ensure that the MariaDB socket exists
      ansible.builtin.assert:
        that:
          - onlyoffice_mariadb_socket_path.stat.exists | bool
          - onlyoffice_mariadb_socket_path.stat.issock | bool
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Query the MariaDB databases, users and version using a socket
      community.mysql.mysql_info:
        filter:
          - users
        return_empty_dbs: true
        login_user: root
        login_unix_socket: "{{ onlyoffice_mariadb_socket }}"
      register: onlyoffice_mariadb_info

    - name: Debug MariaDB user info
      ansible.builtin.debug:
        var: onlyoffice_mariadb_info
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set facts for MariaDB 127.0.0.1
      ansible.builtin.set_fact:
        onlyoffice_mariadb_127_users: "{{ onlyoffice_mariadb_info.users['127.0.0.1'].keys() }}"
      when: onlyoffice_mariadb_info.users['127.0.0.1'] is defined

    - name: Set facts for MariaDB localhost
      ansible.builtin.set_fact:
        onlyoffice_mariadb_lo_users: "{{ onlyoffice_mariadb_info.users.localhost.keys() }}"
      when: onlyoffice_mariadb_info.users.localhost is defined

    - name: Ensure MariaDB user can login using 127.0.0.1
      community.mysql.mysql_query:
        query:
          - CREATE USER '{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) }}'@'127.0.0.1' IDENTIFIED BY '{{ onlyoffice_db_pwd }}'
          - GRANT {% for onlyoffice_mariadb_p in onlyoffice_mariadb_priv %}{{ onlyoffice_mariadb_p }}{% if not loop.last %},{% endif %}{% endfor %} ON {{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}.* TO '{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}'@'127.0.0.1'
        login_db: mysql
        login_user: root
        login_unix_socket: "{{ onlyoffice_mariadb_socket }}"
      when: ( onlyoffice_mariadb_info.users['127.0.0.1'] is not defined ) or ( onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) not in onlyoffice_mariadb_127_users )

    - name: Ensure MariaDB user can login using localhost
      community.mysql.mysql_query:
        query:
          - CREATE USER '{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) }}'@'localhost' IDENTIFIED BY '{{ onlyoffice_db_pwd }}'
          - GRANT {% for onlyoffice_mariadb_p in onlyoffice_mariadb_priv %}{{ onlyoffice_mariadb_p }}{% if not loop.last %},{% endif %}{% endfor %} ON {{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}.* TO '{{ onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_name) }}'@'localhost'
        login_db: mysql
        login_user: root
        login_unix_socket: "{{ onlyoffice_mariadb_socket }}"
      when: ( onlyoffice_mariadb_info.users.localhost is not defined ) or ( onlyoffice_debconf | community.general.json_query(onlyoffice_jpq_db_user) not in onlyoffice_mariadb_lo_users )

  tags:
    - onlyoffice
...
